# from __future__ import print_function
import matplotlib
import numpy as np
import h5py
matplotlib.use('Agg')
from keras.regularizers import l2
from keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from matplotlib import pyplot as plt
from data_utils import data_utils

batch_size = 3000
nb_epoch = 2
data_augmentation = True
img_rows, img_cols = 24, 24
nb_classes = 2

X_train, X_val, X_test, y_train, y_val, y_test = data_utils()

model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(1, img_rows, img_cols), trainable=True, W_regularizer=l2(0.01)))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Convolution2D(32, 3, 3, trainable=True, W_regularizer=l2(0.01)))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Convolution2D(32, 3, 3, trainable=True, W_regularizer=l2(0.01)))
model.add(Activation('relu'))
model.add(Dropout(0.5))

model.add(Convolution2D(64, 3, 3, trainable=True, W_regularizer=l2(0.01)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5))

model.add(Convolution2D(128, 3, 3, trainable=True, W_regularizer=l2(0.01)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(128, init='he_normal', W_regularizer=l2(0.01)))
model.add(Activation('relu'))
# model.add(Dropout(0.5))
model.add(Dense(nb_classes, init='he_normal', W_regularizer=l2(0.01)))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adadelta',
              metrics=['accuracy'])
print(model.summary())

checkpointer = ModelCheckpoint(filepath="weights_wo_transfer.hdf5", verbose=1, monitor='val_loss', save_best_only=True)

early_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=0, mode='auto')


if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, y_train,
              batch_size=batch_size,
              nb_epoch=1,
              validation_data=(X_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')

    # this will do pre-processing and realtime data augmentation
    datagen = ImageDataGenerator(
        rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.10,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.10,  # randomly shift images vertically (fraction of total height)
        vertical_flip=False,
        zoom_range=0.1,
        shear_range=0.1,
        zca_whitening=True,
        fill_mode="nearest")  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)
    # fit the model on the batches generated by datagen.flow()
    past_history = model.fit_generator(datagen.flow(X_train, y_train,
                                                    batch_size=batch_size),
                                       samples_per_epoch=X_train.shape[0],
                                       nb_epoch=nb_epoch,
                                       validation_data=(X_test, y_test),
                                       callbacks=[checkpointer, early_stopping])
    score = model.evaluate(X_val, y_val, batch_size=32, verbose=1)
    print(score[0])
    print(score[1])
    f = open('out.txt', 'w')
    print >> f, 'Losses:', score[0]  # f.write('...\n')
    print >> f, "Score:", score[1]
    f.close()
    # Extracting the losses and accuracies
    val_losses = past_history.history['val_loss']
    val_axis = np.arange(len(val_losses))
    losses_batch = past_history.history['loss']
    loss_batch_axis = np.arange(len(losses_batch))
    acc = past_history.history['acc']
    acc_axis = np.arange(len(acc))

    plt.subplot(1, 2, 1)
    plt.plot(val_axis, val_losses, color="blue", label="validation_loss")
    plt.subplot(1, 2, 2)
    plt.plot(loss_batch_axis, losses_batch, color="red", label="training_loss")
    plt.savefig('losses.png')
    plt.plot(acc_axis, acc, label="Accury v/s epochs")
    plt.savefig('accuracy.png')

with h5py.File('losses_wo_transfer.h5', 'w') as hf:
    hf.create_dataset('acc', data=acc)
    hf.create_dataset('val_losses', data=val_losses)
    hf.create_dataset('losses_batch', data=losses_batch)

'''
# Realizations:
## Why the training loss is so high and remaining approximately constant?
## Why validation accuracy is increasing?
## The input validation and test data distribution is bit skewed! What I am not able to understand is, should
## whether the test data should also have the original class distribution?
## Rigt now I am using only positive examples for the validation part, but is it a correct way to do it?
## What quantity should be checked while crossvalidation, should it be val_loss or val_acc?
## After performing some experiment I found out that the splits done by train_test_split doesn't take care of the
   proportion of classes. I think the best way is to do things manually.
'''
